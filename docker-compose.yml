version: '3.8'

services:
  zookeeper:
    image: zookeeper:3.7
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: srvr,ruok,wchs,stat
      ZOO_DATA_DIR: /data
      ZOO_DATA_LOG_DIR: /datalog
    volumes:
      - zookeeper_data:/data
      - zookeeper_datalog:/datalog
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "textdata:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
      KAFKA_INTER_BROKER_PROTOCOL_VERSION: 2.8
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 60000
    volumes:
      - kafka_data:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - kafka-network
    restart: always
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 60s

  neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_server_config_strict__validation_enabled: "false"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: textdata
    stdin_open: true
    tty: true
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - kafka-network


  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: textdata
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge
    name: kafka-network

volumes:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:
  neo4j_data:
  neo4j_logs: